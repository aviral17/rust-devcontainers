For running postgresql (or psql) ----> cd .devcontainer --------> docker-compose exec db psql -U postgres   OR  docker-compose -f .devcontainer/docker-compose.yml exec db psql -U postgres [This 2nd method not working for me, but you may try]

----*******-----------------************

Running the image specified in docker-compose.yml file --------->

A) Inside ROOT folder, run -----> docker run -p 5432:5432 -e POSTGRES_PASSWORD=testpassword -e POSTGRES_HOST_AUTH_METHOD=trust postgres:14-alpine
B) open new Terminal now and run the rest of the below commands there

----*******-----------------************

NOTE: Both commands running in the ROOT directory
A) To run postgres after setting host along with 5432 port (which is of postgres)  ------->  psql -U postgres -h localhost -p 5432
B) Now exporting Environment variable -------> export DATABASE_URL=postgres://postgres:testpassword@localhost:5432/postgres?sslmode=disable

-------

C) Inside ``crates`` folder, run ---> dbmate status    and to apply pending migrations to the database, run  `dbmate up`

---------- ****************************** --------------------------------------  ******************************** ---------------------------------------------------------------------------------

DATABASE_ACCESS

Cornucopia is a code generator that takes small snippets of SQL and turns them into Rust functions.
We'll turn our crates/db folder into a crate so we can keep all our database logic in one place.

LINK ----------------->  https://rust-on-nails.com/docs/database-part-1/database-access/ ,  {{ github  updated link -------->  https://github.com/purton-tech/rust-on-nails/blob/main/rust-on-nails.com/content/docs/database-part-1/database-access.md

